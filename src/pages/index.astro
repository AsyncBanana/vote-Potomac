---
import AppLayout from "../layouts/AppLayout.astro";
import { verifyJWT } from "../modules/auth";
import { Users } from "../schemas/user";
import { eq } from "drizzle-orm";
import Button from "../components/Button.svelte";
import { notifications } from "../modules/notification";
import URLBasedSuggestionsViewer from "../components/URLBasedSuggestionsViewer.svelte";
import Search from "../components/Search.svelte";
import getSuggestions, {
	type QuestionQueryConfig,
} from "../modules/getSuggestions.ts";
export const prerender = false;
let id;
const authData = Astro.cookies.get("authData")?.value;
if (authData) {
	id = await verifyJWT(Astro.locals.runtime.env, authData);
}
const query = Astro.url.searchParams.get("q");
const sortOrder = (Astro.url.searchParams.get("sort") || "top") as
	| "top"
	| "recent";
const [suggestions, userData] = await Astro.locals.db.batch([
	getSuggestions(
		{
			query,
			sort: sortOrder,
			isFood: false,
			offset: 0,
		},
		Astro
	),
	...(id
		? [
				Astro.locals.db
					.select()
					.from(Users)
					.where(eq(Users.id, id || "")),
			]
		: []), // the lengths I go to avoid naming things
]);
const res = await Astro.locals.handle(
	userData ? { userData: userData[0] } : {}
);
if (res.type === "error") return res.data;
const notification = Astro.cookies.get("notification")?.value as
	| keyof typeof notifications
	| undefined;
if (notification) {
	Astro.cookies.delete("notification");
}
---

<AppLayout {...res.data}>
	<div class="flex flex-col gap-3 mt-3 w-main">
		{
			notification && (
				<div class="alert" id="notification">
					<span class="i-ic:round-check" />
					<span>{notifications[notification]}</span>
					<div>
						<Button
							type="tertiary"
							icon="i-ic:round-close"
							on:click={() => document.getElementById("notification")?.remove()}
							client:load
						/>
					</div>
				</div>
			)
		}
		<Search client:load />
		<select class="select select-bordered w-max" id="sort">
			<option selected={sortOrder === "recent"} value="recent"
				>Most recent</option
			>
			<option selected={sortOrder === "top"} value="top">Most votes</option>
		</select>

		<div id="suggestions" class="flex flex-col gap-3">
			<URLBasedSuggestionsViewer
				userId={userData?.[0]?.id}
				initialSuggestions={suggestions}
				initialLoadAdditional={suggestions.length === 30}
				queryConfig={{
					sort: sortOrder,
					isFood: false,
					query,
				} satisfies QuestionQueryConfig}
				client:load
			/>
		</div>
	</div>
</AppLayout>

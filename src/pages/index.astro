---
import AppLayout from "../layouts/AppLayout.astro";
import { verifyJWT } from "../modules/auth";
import { Suggestions } from "../schemas/suggestion";
import { Users } from "../schemas/user";
import { and, desc, eq, sql } from "drizzle-orm";
import Button from "../components/Button.svelte";
import { notifications } from "../modules/notification";
import { SuggestionsFTS } from "../schemas/fts";
import SuggestionsViewer from "../components/SuggestionsViewer.astro";
import { ContentStatus } from "../types/SharedContent";
import Suggestion from "../components/Suggestion.astro";
export const prerender = false;
let id;
const authData = Astro.cookies.get("authData")?.value;
if (authData) {
	id = await verifyJWT(Astro.locals.runtime.env, authData);
}
const query = Astro.url.searchParams.get("q");
const sortOrder = Astro.url.searchParams.get("sort") || "top";
const [suggestions, userData] = await Astro.locals.db.batch([
	query
		? Astro.locals.db
				.select({
					id: SuggestionsFTS.id,
					title: SuggestionsFTS.title,
					voteCount: SuggestionsFTS.voteCount,
					votes: SuggestionsFTS.votes,
					downvotes: SuggestionsFTS.downvotes,
				})
				.from(SuggestionsFTS)
				.where(
					and(
						eq(SuggestionsFTS, ContentStatus.Active),
						sql`${SuggestionsFTS.title} MATCH ${query}`
					)
				)
				.limit(30)
				.orderBy(sql`rank`)
		: Astro.locals.db
				.select({
					id: Suggestions.id,
					title: Suggestions.title,
					voteCount: Suggestions.voteCount,
					votes: Suggestions.votes,
					downvotes: Suggestions.downvotes,
				})
				.from(Suggestions)
				.limit(30)
				.orderBy(
					desc(sortOrder === "top" ? Suggestions.voteCount : Suggestions.id)
				)
				.where(eq(Suggestions.status, ContentStatus.Active)),
	...(id
		? [
				Astro.locals.db
					.select()
					.from(Users)
					.where(eq(Users.id, id || "")),
			]
		: []), // the lengths I go to avoid naming things
]);
const res = await Astro.locals.handle(
	userData ? { userData: userData[0] } : {}
);
if (res.type === "error") return res.data;
const notification = Astro.cookies.get("notification")?.value as
	| keyof typeof notifications
	| undefined;
if (notification) {
	Astro.cookies.delete("notification");
}
---

<AppLayout {...res.data}>
	<div class="flex flex-col gap-3 mt-3 w-main">
		{
			notification && (
				<div class="alert" id="notification">
					<span class="i-ic:round-check" />
					<span>{notifications[notification]}</span>
					<div>
						<Button
							type="tertiary"
							icon="i-ic:round-close"
							on:click={() => document.getElementById("notification")?.remove()}
							client:load
						/>
					</div>
				</div>
			)
		}
		<div
			class="input input-bordered w-full flex align-middle items-center gap-3"
		>
			<div class="i-material-symbols:search h-6 w-6"></div>
			<input
				type="search"
				placeholder="Search for suggestions..."
				class="bg-transparent h-full grow"
				id="suggestionSearch"
				value={query}
			/>
		</div>
		<select class="select select-bordered w-max" id="sort">
			<option selected={sortOrder === "recent"} value="recent"
				>Most recent</option
			>
			<option selected={sortOrder === "top"} value="top">Most votes</option>
		</select>

		<div id="suggestions" class="flex flex-col gap-3">
			<SuggestionsViewer
				id={userData?.[0]?.id}
				suggestions={suggestions}
				loadAdditional={suggestions.length === 30}
			/>
		</div>
	</div>
</AppLayout>
<script>
	async function querySearch(
		q: string = search.value,
		sort: string = sortEl.options[sortEl.selectedIndex].value,
		pushstate: boolean = true
	) {
		const queryParams = new URLSearchParams();
		if (q) queryParams.append("q", q);
		if (sort) queryParams.append("sort", sort);
		const res = await fetch(
			`/api/suggestions/${
				queryParams.size > 0 ? `?${queryParams.toString()}` : ""
			}`
		);
		const text = await res.text();
		if (text === "No suggestions found") {
			suggestions.innerHTML = "No suggestions found :(";
			return;
		}
		if (!res.ok) return;
		suggestions.innerHTML = text;
		if (pushstate)
			history.pushState(
				{ q, sort },
				"",
				queryParams.size > 0 ? `/?${queryParams.toString()}` : "/"
			);
	}
	let searchFunc: NodeJS.Timeout;
	const search = document.getElementById(
		"suggestionSearch"
	) as HTMLInputElement;
	const suggestions = document.getElementById("suggestions") as HTMLDivElement;
	const sortEl = document.getElementById(
		"sort"
	) as unknown as HTMLSelectElement;
	search.addEventListener("input", (e) => {
		if (searchFunc) clearTimeout(searchFunc);
		searchFunc = setTimeout(querySearch, 600);
	});
	addEventListener("popstate", async (event) => {
		search.value = event.state.q;
		await querySearch(event.state.q, event.state.sort, false);
	});
	sortEl.addEventListener("change", async (e) => {
		await querySearch();
	});
	let offset = 30;
	// @ts-expect-error trust guys not using a js framework was a great idea
	window.loadSuggestions = async () => {
		const res = await fetch(
			`/api/suggestions?offset=${offset}&sort=${new URLSearchParams(document.location.search).get("sort") || "top"}`
		);
		offset += 30; // if the suggestion count is not 30, this will not matter
		suggestions.insertAdjacentHTML("beforeend", await res.text());
	};
</script>

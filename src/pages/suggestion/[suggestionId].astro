---
import Button from "../../components/Button.svelte";
import Suggestion from "../../components/Suggestion.astro";
import AppLayout from "../../layouts/AppLayout.astro";
import { desc, eq, ne } from "drizzle-orm";
import { verifyJWT } from "../../modules/auth";
import { Suggestions } from "../../schemas/suggestion";
import { UserRole, Users } from "../../schemas/user";
import { extractDendrite } from "../../modules/dendrite";
const id = Astro.params.suggestionId;

let userId;
const authData = Astro.cookies.get("authData")?.value;
if (!id) return new Response("Not found", { status: 404 });
if (authData) {
	userId = await verifyJWT(authData);
}
const [[suggestion], suggestions, userData] = await Astro.locals.db.batch([
	Astro.locals.db.select().from(Suggestions).where(eq(Suggestions.id, +id)),
	Astro.locals.db
		.select()
		.from(Suggestions)
		.where(ne(Suggestions.id, +id))
		.orderBy(desc(Suggestions.votes))
		.limit(5),
	...(userId
		? [
				Astro.locals.db
					.select()
					.from(Users)
					.where(eq(Users.id, userId || "")),
		  ]
		: []), // the lengths I go to avoid naming things
]);
if (!suggestion) {
	return new Response("Not found", {
		status: 404,
	});
}
const res = await Astro.locals.handle(
	userData ? { userData: userData[0] } : {},
);
const canDelete =
	suggestion.author === userId /* is author */ ||
	userData?.[0]?.role >= UserRole.admin; /* is admin */
if (res.type === "error") return res.data;
---

<AppLayout {...res.data} class="w-main" id={`suggestion-${suggestion.id}`}>
	<header class="flex flex-row gap-3 grow items-stretch">
		<Button
			type={userId && suggestion.votes?.includes(userId)
				? "primary"
				: "tertiary"}
			class="h-auto"
			icon="i-bx:upvote"
			id="vote"
			vertical
		>
			{suggestion.votes?.length || 0}
		</Button>
		<div>
			<h1 class="text-3xl font-bold text-balance">
				{suggestion.title}
			</h1>
			<div class="text-sm text-neutral-content font-medium">
				Created {
					extractDendrite(+id).toLocaleString(
						Astro.request.headers.get("accept-language")?.split(",")[0] ||
							"en-US",
						{
							timeZone:
								(Astro.locals.runtime?.cf?.timezone as string) ||
								"America/New_York",
							dateStyle: "short",
						},
					)
				}
			</div>
		</div>
		{
			canDelete && (
				<Button
					type="tertiary"
					class="justify-self-end ml-auto self-center"
					id="deletionButton"
					icon="i-material-symbols:delete-outline"
				/>
			)
		}
	</header>
	<main class="text-lg leading-loose" set:html={suggestion.description} />
	<h1 class="text-2xl font-bold mt-6">More suggestions</h1>
	<div class="flex flex-col gap-3">
		{
			suggestions.map((suggestion) => (
				<Suggestion
					title={suggestion.title}
					votes={suggestion.votes?.length || 0}
					id={suggestion.id}
				/>
			))
		}
	</div>
	<dialog class="modal" id="deletionModal">
		<div class="modal-box">
			<h3 class="font-bold text-lg">Delete Suggestion</h3>
			<p class="py-4">
				Are you sure you wish to delete this suggestion? This action is
				permanent.
			</p>
			<div class="modal-action">
				<form method="dialog">
					<Button type="tertiary" autofocus>Close</Button>
				</form>
				<form method="dialog">
					<Button type="error" value="delete">Delete</Button>
				</form>
			</div>
		</div>
	</dialog>
</AppLayout>
<script>
	const vote = document.getElementById("vote") as HTMLButtonElement;
	const voteText = document.querySelector("#vote #text") as HTMLSpanElement;
	const deletionButton = document.getElementById(
		"deletionButton",
	) as HTMLButtonElement;
	const deletionModal = document.getElementById(
		"deletionModal",
	) as HTMLDialogElement;
	const suggestionId = document.querySelector("body")?.id.split("-")[1];
	vote.addEventListener("click", async () => {
		if (vote.classList.contains("btn-outline")) {
			const res = await fetch("/api/suggestion/vote", {
				method: "POST",
				body: suggestionId,
			});
			if (res.status === 401) {
				document.location.assign(
					`/api/auth/signin?redirectURL=${encodeURIComponent(
						document.location.href,
					)}`,
				);
			}
			voteText.innerText = (+vote.innerText + 1).toString();
		} else {
			const res = await fetch("/api/suggestion/unvote", {
				method: "POST",
				body: suggestionId,
			});
			if (res.status === 401) {
				document.location.assign(
					`/api/auth/signin?redirectURL=${encodeURIComponent(
						document.location.href,
					)}`,
				);
			}
			voteText.innerText = (+vote.innerText - 1).toString();
		}
		vote.classList.toggle("btn-outline");
		vote.classList.toggle("btn-primary");
	});
	if (deletionButton) {
		deletionButton.addEventListener("click", () => {
			deletionModal.showModal();
		});
		deletionModal.addEventListener("close", async (e) => {
			console.log(deletionModal.returnValue);
			if (deletionModal.returnValue === "delete") {
				await fetch("/api/suggestion/delete", {
					method: "POST",
					body: suggestionId,
				});
				window.location.assign("/");
			}
		});
	}
</script>

---
import Button from "../../components/Button.svelte";
import Suggestion from "../../components/Suggestion.astro";
import AppLayout from "../../layouts/AppLayout.astro";
import { and, desc, eq, ne } from "drizzle-orm";
import { verifyJWT } from "../../modules/auth";
import { Suggestions } from "../../schemas/suggestion";
import { UserRole, Users } from "../../schemas/user";
import { extractDendrite } from "../../modules/dendrite";
import Textarea from "../../components/Textarea.astro";
import { Comments } from "../../schemas/comment";
import { ContentStatus } from "../../types/SharedContent";
const id = Astro.params.suggestionId;

let userId: string | undefined;
const authData = Astro.cookies.get("authData")?.value;
if (!id) return new Response("Not found", { status: 404 });
if (authData) {
	userId = await verifyJWT(Astro.locals.runtime.env, authData);
}
const [[suggestion], suggestions, comments, userDataRaw] =
	await Astro.locals.db.batch([
		Astro.locals.db.select().from(Suggestions).where(eq(Suggestions.id, +id)),
		Astro.locals.db
			.select()
			.from(Suggestions)
			.where(ne(Suggestions.id, +id))
			.orderBy(desc(Suggestions.voteCount))
			.limit(5),
		Astro.locals.db
			.select()
			.from(Comments)
			.where(
				and(
					eq(Comments.parentId, +id),
					eq(Comments.status, ContentStatus.Active)
				)
			)
			.orderBy(Comments.voteCount),
		...(userId
			? [
					Astro.locals.db
						.select()
						.from(Users)
						.where(eq(Users.id, userId || "")),
				]
			: []), // the lengths I go to avoid naming things
	]);
const userData = userDataRaw?.[0];
if (
	!suggestion ||
	(suggestion.status !== ContentStatus.Active &&
		suggestion.status !== ContentStatus.FoodActive &&
		userData?.role < UserRole.admin)
) {
	return new Response("Not found", {
		status: 404,
	});
}
const res = await Astro.locals.handle(userData ? { userData } : {});
const canDelete =
	suggestion.author === userId /* is author */ ||
	userData?.role >= UserRole.admin; /* is admin */
if (res.type === "error") return res.data;
---

<AppLayout
	{...res.data}
	class="w-main"
	description={suggestion.description
		? (suggestion.description.length > 160
				? suggestion.description.substring(0, 157) + "..."
				: suggestion.description
			).replace("\n", " ")
		: "A suggestion for the Potomac School Student Government"}
	title={`${suggestion.title.length > 45 ? suggestion.title.substring(0, 45) + "..." : suggestion.title} | Vote! Potomac`}
>
	<header class="flex flex-row gap-3 grow place-items-center">
		<div class="grid grid-rows-2 gap-1">
			<Button
				type={userId && suggestion.votes?.includes(userId)
					? "primary"
					: "tertiary"}
				class="vote-btn h-8 min-h-8"
				square={false}
				icon="i-bx:upvote"
				id={`vote-suggestion-${suggestion.id}-up`}
				vertical
				ariaLabel="Vote for suggestion"
				disabled={suggestion.status !== ContentStatus.Active}
			/>
			<Button
				type={userId && suggestion.downvotes?.includes(userId)
					? "primary"
					: "tertiary"}
				class="vote-btn h-8 min-h-8"
				icon="i-bx:downvote"
				square={false}
				id={`vote-suggestion-${suggestion.id}-down`}
				vertical
				ariaLabel="Vote against suggestion"
				disabled={suggestion.status !== ContentStatus.Active}
			/>
		</div>
		<div class="text-3xl font-bold" id={`text-suggestion-${suggestion.id}`}>
			{suggestion.voteCount || 0}
		</div>
		<div>
			<h1 class="text-3xl font-bold text-balance">
				{suggestion.title}
			</h1>
			<div class="text-sm text-opacity-60 text-base-content font-medium">
				Created {
					extractDendrite(suggestion.id).toLocaleString(
						Astro.request.headers.get("accept-language")?.split(",")[0] ||
							"en-US",
						{
							timeZone:
								(Astro.locals.runtime?.cf?.timezone as string) ||
								"America/New_York",
							dateStyle: "short",
						}
					)
				}
			</div>
		</div>
		{
			canDelete && (
				<Button
					type="tertiary"
					class="justify-self-end ml-auto self-center delete-btn"
					id={`delete-suggestion-${suggestion.id}`}
					icon="i-material-symbols:delete-outline"
				/>
			)
		}
	</header>
	<main class="text-lg leading-loose" set:html={suggestion.description} />
	<h2 class="text-2xl font-bold mt-6">Comments</h2>
	{
		userData?.role >= UserRole.user ? (
			<form method="post" action="/api/comment/" id="commentInput">
				<Textarea
					minlength={import.meta.env.MIN_COMMENT_LENGTH}
					maxlength={import.meta.env.MAX_COMMENT_LENGTH}
					markdown={true}
					placeholder="Well, akshually..."
					name="description"
					rows={5}
				>
					Enter comment text
				</Textarea>
				<input type="hidden" name="parentId" value={id} />
				<Button type="secondary" action="submit" class="mt-3">
					Submit comment
				</Button>
			</form>
		) : (
			<Button
				type="secondary"
				href={`/api/auth/signin?redirectURL=${encodeURIComponent(
					Astro.url.pathname
				)}`}
			>
				Sign in to comment
			</Button>
		)
	}
	{
		comments.length > 0 ? (
			<div class="flex flex-col gap-3 mt-3">
				{comments.map((comment) => (
					<div>
						<div class="flex items-center gap-3">
							<div class="grid grid-rows-2 gap-1">
								<Button
									type={
										userId && comment.votes?.includes(userId)
											? "primary"
											: "tertiary"
									}
									class="vote-btn h-8 min-h-8"
									square={false}
									icon="i-bx:upvote"
									id={`vote-comment-${comment.id}-up`}
									vertical
									ariaLabel="Vote for comment"
								/>
								<Button
									type={
										userId && comment.downvotes?.includes(userId)
											? "primary"
											: "tertiary"
									}
									class="vote-btn h-8 min-h-8"
									icon="i-bx:downvote"
									square={false}
									id={`vote-comment-${comment.id}-down`}
									vertical
									ariaLabel="Vote against comment"
								/>
							</div>
							<div class="text-3xl font-bold" id={`text-comment-${comment.id}`}>
								{comment.voteCount || 0}
							</div>
							<h2 class="text-opacity-90 text-base-content font-medium text-lg">
								Created{" "}
								{extractDendrite(comment.id).toLocaleString(
									Astro.request.headers.get("accept-language")?.split(",")[0] ||
										"en-US",
									{
										timeZone:
											(Astro.locals.runtime?.cf?.timezone as string) ||
											"America/New_York",
										dateStyle: "short",
									}
								)}
							</h2>
							{(comment.author === userId ||
								userData?.role >= UserRole.admin) && (
								<Button
									type="tertiary"
									class="justify-self-end ml-auto self-center delete-btn"
									id={`delete-comment-${comment.id}`}
									icon="i-material-symbols:delete-outline"
								/>
							)}
						</div>
						<div class="text-lg leading-loose" set:html={comment.description} />
						<hr class="opacity-30" />
					</div>
				))}
			</div>
		) : (
			<div>No comments currently</div>
		)
	}
	<h2 class="text-2xl font-bold mt-6">More suggestions</h2>
	<div class="flex flex-col gap-3">
		{
			suggestions.map((suggestion) => (
				<Suggestion
					title={suggestion.title}
					votes={suggestion?.voteCount || 0}
					vote={
						userId
							? suggestion.votes?.includes(userId)
								? "up"
								: suggestion.downvotes?.includes(userId)
									? "down"
									: undefined
							: undefined
					}
					id={suggestion.id}
				/>
			))
		}
	</div>
	<dialog class="modal" id="deletionModal">
		<div class="modal-box">
			<h3 class="font-bold text-lg" id="deletionModal-title">
				Delete Suggestion
			</h3>
			<p class="py-4" id="deletionModal-desc">
				Are you sure you wish to delete this suggestion? This action is
				permanent.
			</p>
			<div class="modal-action">
				<form method="dialog">
					<Button type="tertiary" autofocus>Close</Button>
				</form>
				<form method="dialog">
					<Button type="error" value="delete" id="deletionModal-deleteBtn">
						Delete
					</Button>
				</form>
			</div>
		</div>
	</dialog>
</AppLayout>
<script>
	const voteBtns = Array.from(
		document.getElementsByClassName(
			"vote-btn"
		) as HTMLCollectionOf<HTMLButtonElement>
	);
	const deletionBtns = Array.from(
		document.getElementsByClassName(
			"delete-btn"
		) as HTMLCollectionOf<HTMLButtonElement>
	);
	const deletionModal = document.getElementById(
		"deletionModal"
	) as HTMLDialogElement;
	const voteBtnsAggregated = {
		comment: {} as Record<string, [HTMLButtonElement, HTMLButtonElement]>,
		suggestion: {} as Record<string, [HTMLButtonElement, HTMLButtonElement]>,
	};
	for (const voteBtn of voteBtns) {
		const [_, type, contentId, vote] = voteBtn.id.split("-") as [
			"vote-suggestion",
			"suggestion" | "comment",
			string,
			"up" | "down",
		];

		const voteText = document.querySelector(
			`#text-${type}-${contentId}`
		) as HTMLSpanElement;
		if (!(contentId in voteBtnsAggregated[type])) {
			// @ts-expect-error too lazy to change types
			voteBtnsAggregated[type][contentId] = [];
		}
		voteBtnsAggregated[type][contentId][vote === "up" ? 1 : 0] = voteBtn;
		voteBtn.addEventListener("click", async () => {
			if (voteBtn.classList.contains("btn-outline")) {
				const res = await fetch(`/api/${type}/vote`, {
					method: "POST",
					body: JSON.stringify({
						id: contentId,
						vote,
					}),
				});
				if (res.status === 401) {
					document.location.assign(
						`/api/auth/signin?redirectURL=${encodeURIComponent(
							document.location.href
						)}`
					);
				}
				voteText.innerText = (
					+voteText.innerText + (vote === "up" ? 1 : -1)
				).toString();
				if (
					voteBtnsAggregated[type][contentId][
						vote === "up" ? 0 : 1
					].classList.contains("btn-primary")
				) {
					voteBtnsAggregated[type][contentId][
						vote === "up" ? 0 : 1
					].classList.remove("btn-primary");
					voteBtnsAggregated[type][contentId][
						vote === "up" ? 0 : 1
					].classList.add("btn-outline");
					voteText.innerText = (
						+voteText.innerText + (vote === "up" ? 1 : -1)
					).toString();
				}
			} else {
				const res = await fetch(`/api/${type}/unvote`, {
					method: "POST",
					body: contentId,
				});
				if (res.status === 401) {
					document.location.assign(
						`/api/auth/signin?redirectURL=${encodeURIComponent(
							document.location.href
						)}`
					);
				}
				voteText.innerText = (
					+voteText.innerText - (vote === "up" ? 1 : -1)
				).toString();
			}
			voteBtn.classList.toggle("btn-outline");
			voteBtn.classList.toggle("btn-primary");
		});
	}
	if (deletionBtns.length > 0) {
		const deletionModalDeleteBtn = document.getElementById(
			"deletionModal-deleteBtn"
		) as HTMLButtonElement;
		const deletionModalDesc = document.getElementById(
			"deletionModal-desc"
		) as HTMLParagraphElement;
		const deletionModalTitle = document.getElementById(
			"deletionModal-title"
		) as HTMLHeadingElement;
		deletionModal.addEventListener("close", async () => {
			if (deletionModal.returnValue.startsWith("delete-")) {
				const [_, type, contentId] = deletionModal.returnValue.split("-");
				await fetch(`/api/${type}/delete`, {
					method: "POST",
					body: contentId,
				});
				if (type === "suggestion") window.location.assign("/");
			}
		});
		deletionBtns.forEach((deleteBtn) => {
			const [_, type, contentId] = deleteBtn.id.split("-");
			deleteBtn.addEventListener("click", () => {
				deletionModalTitle.innerText = `Delete ${
					type[0].toUpperCase() + type.substring(1)
				}`;
				deletionModalDesc.innerText = `Are you sure you wish to delete this ${type}? This action is permanent.`;
				deletionModalDeleteBtn.value = `delete-${type}-${contentId}`;
				deletionModal.showModal();
			});
		});
	}
	const commentForm = document.getElementById(
		"commentInput"
	) as HTMLFormElement;
	commentForm?.addEventListener("submit", async (e) => {
		e.preventDefault();
		const res = await fetch("/api/comment", {
			method: "POST",
			body: new FormData(commentForm),
		});
		commentForm.reset();
	});
</script>

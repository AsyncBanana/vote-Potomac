---
import { eq } from "drizzle-orm";
import Button from "../../components/Button.svelte";
import Card from "../../components/Card.svelte";
import AdminLayout from "../../layouts/AdminLayout.astro";
import { extractDendrite } from "../../modules/dendrite";
import { Comments } from "../../schemas/comment";
import { Suggestions } from "../../schemas/suggestion";
import Suggestion from "../../components/Suggestion.astro";
import { ContentStatus } from "../../types/SharedContent";
const res = await Astro.locals.handle({
	minimumRole: 10,
});
if (res.type === "error") return res.data;
const [suggestions, comments] = await Astro.locals.db.batch([
	Astro.locals.db
		.select()
		.from(Suggestions)
		.limit(10)
		.where(eq(Suggestions.status, ContentStatus.ModerationQueue)),
	Astro.locals.db
		.select()
		.from(Comments)
		.limit(10)
		.where(eq(Comments.status, ContentStatus.ModerationQueue)),
]);
---

<AdminLayout {...res.data} currentRoute="Moderation" noindex>
	<div>
		<div class="flex flex-col gap-3">
			<h2 class="text-xl font-bold">Suggestions</h2>
			{
				suggestions.length > 0 ? (
					suggestions.map((suggestion) => (
						<Card
							title={suggestion.title}
							subtitle={`Created ${extractDendrite(
								suggestion.id
							).toLocaleString(
								Astro.request.headers.get("accept-language")?.split(",")[0] ||
									"en-US",
								{
									timeZone:
										(Astro.locals.runtime?.cf?.timezone as string) ||
										"America/New_York",
									dateStyle: "short",
								}
							)}`}
							set:html={suggestion.description}
							id={`suggestion-${suggestion.id}`}
						>
							<Button
								slot="actions"
								type="Borderless"
								class="text-green-400 bg-base-300 approveButton"
								icon="i-ic:round-check"
								id={`suggestion-approve-${suggestion.id}`}
							/>
							<Button
								slot="actions"
								type="Borderless"
								class="text-red-400 bg-base-300 rejectButton"
								icon="i-ic:round-close"
								id={`suggestion-reject-${suggestion.id}`}
							/>
						</Card>
					))
				) : (
					<p>No suggestions to moderate right now :{")"}</p>
				)
			}
		</div>
		<div class="flex flex-col gap-3">
			<h2 class="text-xl font-bold">Comments</h2>
			{
				comments.length > 0 ? (
					comments.map((comment) => (
						<Card
							subtitle={`Created ${extractDendrite(comment.id).toLocaleString(
								Astro.request.headers.get("accept-language")?.split(",")[0] ||
									"en-US",
								{
									timeZone:
										(Astro.locals.runtime?.cf?.timezone as string) ||
										"America/New_York",
									dateStyle: "short",
								}
							)}`}
							set:html={comment.description}
							id={`comment-${comment.id}`}
						>
							<Button
								slot="actions"
								type="Borderless"
								class="text-green-400 bg-base-300 approveButton"
								icon="i-ic:round-check"
								id={`comment-approve-${comment.id}`}
							/>
							<Button
								slot="actions"
								type="Borderless"
								class="text-red-400 bg-base-300 rejectButton"
								icon="i-ic:round-close"
								id={`comment-reject-${comment.id}`}
							/>
						</Card>
					))
				) : (
					<p>No comments to moderate right now :{")"}</p>
				)
			}
		</div>
	</div>
</AdminLayout>
<script>
	for (const el of document.querySelectorAll(
		".approveButton,.rejectButton"
	) as NodeListOf<HTMLButtonElement>) {
		const [parentType, type, id] = el.id.split("-");
		el.addEventListener("click", async () => {
			await fetch(`/api/${parentType}/moderation/${type}`, {
				method: "POST",
				body: id,
			});
			document.getElementById(`${parentType}-${id}`)?.remove();
		});
	}
</script>

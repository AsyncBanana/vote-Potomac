---
import AppLayout from "../layouts/AppLayout.astro";
import { verifyJWT } from "../modules/auth";
import { FoodLocation } from "../schemas/suggestion";
import { Users } from "../schemas/user";
import { eq } from "drizzle-orm";
import Button from "../components/Button.svelte";
import { notifications } from "../modules/notification";
import URLBasedSuggestionsViewer from "../components/URLBasedSuggestionsViewer.svelte";
import FoodForm from "../fragments/FoodForm.svelte";
import ImageStarGrid from "../components/ImageStarGrid.svelte";
import getSuggestions from "../modules/getSuggestions";
import OrderSelect from "../components/OrderSelect.svelte";
export const prerender = false;
let id;
const authData = Astro.cookies.get("authData")?.value;
if (authData) {
	id = await verifyJWT(Astro.locals.runtime.env, authData);
}
const sortOrder = (Astro.url.searchParams.get("sort") || "top") as
	| "top"
	| "recent";
const [suggestions, userData] = await Astro.locals.db.batch([
	getSuggestions(
		{
			sort: sortOrder,
			isFood: true,
			offset: 0,
		},
		Astro
	),
	...(id
		? [
				Astro.locals.db
					.select()
					.from(Users)
					.where(eq(Users.id, id || "")),
			]
		: []), // the lengths I go to avoid naming things
]);
const res = await Astro.locals.handle(
	userData ? { userData: userData[0] } : {}
);
if (res.type === "error") return res.data;
const notification = Astro.cookies.get("notification")?.value as
	| keyof typeof notifications
	| undefined;
if (notification) {
	Astro.cookies.delete("notification");
}
---

<AppLayout {...res.data} theme="light" newSuggestionButton={false}>
	<div class="flex flex-col gap-3 mt-3 w-main">
		{
			notification && (
				<div class="alert" id="notification">
					<span class="i-ic:round-check" />
					<span>{notifications[notification]}</span>
					<div>
						<Button
							type="tertiary"
							icon="i-ic:round-close"
							on:click={() => document.getElementById("notification")?.remove()}
							client:load
						/>
					</div>
				</div>
			)
		}
		<div class="h-[50vh] w-full">
			<h1 class="font-black text-7xl text-center">Let's get better snacks</h1>
			<div class="grid grid-cols-3 gap-1 w-max m-auto">
				<ImageStarGrid
					items={[
						["Vending Machine", "/images/vending.avif", FoodLocation.vending],
						["Breakfast Bar", "/images/breakfast.avif", FoodLocation.breakfast],
						["Panther Pit", "/images/pantherpit.avif", FoodLocation.pantherpit],
					]}
					client:load
				/>
			</div>
		</div>
		<Button
			href={userData?.[0]
				? "#submit"
				: `/api/auth/signin?redirectURL=${encodeURIComponent("/food#submit")}`}
			className="w-min block">Submit New</Button
		>
		<OrderSelect sortOrder={sortOrder} client:load />
		<div id="suggestions" class="flex flex-col gap-3">
			<URLBasedSuggestionsViewer
				id={userData?.[0]?.id}
				initialSuggestions={suggestions}
				loadAdditional={suggestions.length === 30}
				isFood
				client:load
			/>
		</div>
	</div>
	<FoodForm client:load />
</AppLayout>
<!-- // BUG: will not work without global -->
<style is:global>
	:is(.ci-vending, .ci-breakfast, .ci-pantherpit) {
		&::before {
			width: 32px;
			height: 32px;
			background-position: center;
			background-size: contain;
			background-repeat: no-repeat;
			content: "";
		}
		&:checked {
			@apply !bg-secondary;
		}
	}
	.ci-vending::before {
		background-image: url("/images/vending.avif");
	}
	.ci-breakfast::before {
		background-image: url("/images/breakfast.avif");
	}
	.ci-pantherpit::before {
		background-image: url("/images/pantherpit.avif");
	}
</style>

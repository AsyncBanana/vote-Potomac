---
import { desc, eq, sql, and, inArray, exists } from "drizzle-orm";
import {
	FoodLocation,
	Suggestions as SuggestionsTable,
	type SuggestionMetadata,
} from "../../schemas/suggestion";
import { SuggestionsFTS } from "../../schemas/fts";
import type { UsersSelect } from "../../schemas/user";
import { verifyJWT } from "../../modules/auth";
import SuggestionsViewer from "../../components/SuggestionsViewer.astro";
import { ContentStatus } from "../../types/SharedContent";
interface PartialSuggestion {
	id: number;
	voteCount: number | null;
	title: string;
	votes: string[] | null;
	downvotes: string[] | null;
	metadata?: SuggestionMetadata;
}
export interface Props {
	suggestions?: PartialSuggestion[];
	userData?: UsersSelect;
	query?: string;
	sort?: "top" | "recent";
	offset?: number;
	isFood?: boolean;
	location: FoodLocation;
}
const query = Astro.props.query || Astro.url.searchParams.get("q");
const sort = Astro.props.sort || Astro.url.searchParams.get("sort");
const offset = Astro.props.offset || Astro.url.searchParams.get("offset");
const isFood = Astro.props.isFood || Astro.url.searchParams.has("food");
const location =
	Astro.props.location || Astro.url.searchParams.has("location")
		? Astro.url.searchParams.get("location")
		: undefined;
const suggestions: PartialSuggestion[] =
	Astro.props.suggestions ||
	(await (query
		? Astro.locals.db
				.select({
					id: SuggestionsFTS.id,
					title: SuggestionsFTS.title,
					voteCount: SuggestionsFTS.voteCount,
					votes: SuggestionsFTS.votes,
					downvotes: SuggestionsFTS.downvotes,
				})
				.from(SuggestionsFTS)
				.where(sql`${SuggestionsFTS.title} MATCH ${query}`)
				.offset(+(offset || 0)) // Could prevent scan of results by implementing offset using votes/date
				.limit(30)
				.orderBy(sql`rank`)
		: Astro.locals.db
				.select({
					id: SuggestionsTable.id,
					title: SuggestionsTable.title,
					voteCount: SuggestionsTable.voteCount,
					votes: SuggestionsTable.votes,
					downvotes: SuggestionsTable.downvotes,
					metadata: SuggestionsTable.metadata,
				})
				.from(SuggestionsTable)
				.where(
					and(
						eq(
							SuggestionsTable.status,
							isFood ? ContentStatus.FoodActive : ContentStatus.Active
						),
						isFood && location
							? exists(
									Astro.locals.db
										.select({ v: sql`1` })
										.from(
											sql`json_each(${SuggestionsTable.metadata}-> 'locations')`
										)
										.where(eq(sql`value`, +location))
								)
							: undefined
					)
				)
				.limit(30)

				.orderBy(
					desc(
						sort === "top" ? SuggestionsTable.voteCount : SuggestionsTable.id
					)
				)
				.offset(+(offset || 0))));
const id =
	Astro.props.userData?.id ||
	(await verifyJWT(
		Astro.locals.runtime.env,
		Astro.cookies.get("authData")?.value
	));
if (suggestions.length === 0) {
	return new Response("No suggestions found", { status: 200 });
}
export const partial = true;
---

<SuggestionsViewer
	suggestions={suggestions}
	id={id}
	loadAdditional={suggestions.length === 30}
/>

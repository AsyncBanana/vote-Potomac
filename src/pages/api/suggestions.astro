---
import { desc, sql, type InferSelectModel } from "drizzle-orm";
import { Suggestions as SuggestionsTable } from "../../schemas/suggestion";
import { SuggestionsFTS } from "../../schemas/fts";
import Suggestion from "../../components/Suggestion.astro";
import type { Users } from "../../schemas/user";
import { verifyJWT } from "../../modules/auth";
import Button from "../../components/Button.svelte";
interface PartialSuggestion {
	id: number;
	voteCount: number | null;
	title: string;
	votes: string[] | null;
}
export interface Props {
	suggestions?: PartialSuggestion[];
	userData?: InferSelectModel<typeof Users>;
	query?: string;
	sort?: "top" | "recent";
	offset?: number;
}
const query = Astro.props.query || Astro.url.searchParams.get("q");
const sort = Astro.props.sort || Astro.url.searchParams.get("sort");
const offset = Astro.props.offset || Astro.url.searchParams.get("offset");
const suggestions: PartialSuggestion[] =
	Astro.props.suggestions ||
	(await (query
		? Astro.locals.db
				.select({
					id: SuggestionsFTS.id,
					title: SuggestionsFTS.title,
					voteCount: SuggestionsFTS.voteCount,
					votes: SuggestionsFTS.votes,
				})
				.from(SuggestionsFTS)
				.where(sql`${SuggestionsFTS.title} MATCH ${query}`)
				.offset(+(offset || 0)) // Could prevent scan of results by implementing offset using votes/date
				.limit(30)
				.orderBy(sql`rank`)
		: Astro.locals.db
				.select({
					id: SuggestionsTable.id,
					title: SuggestionsTable.title,
					voteCount: SuggestionsTable.voteCount,
					votes: SuggestionsTable.votes,
				})
				.from(SuggestionsTable)
				.limit(30)
				.offset(+(offset || 0))
				.orderBy(
					desc(
						sort === "top" ? SuggestionsTable.voteCount : SuggestionsTable.id,
					),
				)));
const id =
	Astro.props.userData?.id ||
	(await verifyJWT(Astro.cookies.get("authData")?.value));
if (suggestions.length === 0) {
	return new Response("No suggestions found", { status: 404 });
}
export const partial = true;
---

{
	suggestions.map((suggestion) => (
		<Suggestion
			title={suggestion.title}
			votes={suggestion?.voteCount || 0}
			id={suggestion.id}
			hasVoted={!!id && suggestion.votes?.includes(id)}
		/>
	))
}
{
	suggestions.length === 30 ? (
		<Button type="secondary" onclick="loadComments(this)">
			Load More Suggestions
		</Button>
	) : (
		""
	)
}
